export declare function isObject(target: unknown): target is Record<string, any>;
export declare function unknownErrorToString(error: unknown): string;
declare type Predicate<TInput> = (v: TInput) => boolean;
declare type Handler<TInput, TOutput> = (v: TInput) => TOutput;
interface Match<Input, Output> {
    when: (predicate: Predicate<Input>, handler: Handler<Input, Output>) => this;
    run: () => Output;
    otherwise: (handler: Handler<Input, Output>) => this;
}
export declare function match<TInput, TOutput>(value: TInput): Match<TInput, TOutput>;
export {};
