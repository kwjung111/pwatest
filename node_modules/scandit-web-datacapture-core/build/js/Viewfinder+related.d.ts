import type { Color, ColorJSON, NumberWithUnit, NumberWithUnitJSON, SizeWithUnitAndAspect, SizeWithUnitAndAspectJSON } from "./Common";
import type { Serializable } from "./private/Serializable";
export declare enum RectangularViewfinderStyle {
    Rounded = "rounded",
    Square = "square"
}
export declare enum RectangularViewfinderLineStyle {
    Light = "light",
    Bold = "bold"
}
export declare enum LaserlineViewfinderStyle {
    Animated = "animated"
}
export interface PrivateLaserlineViewfinderDefault {
    style: LaserlineViewfinderStyle;
    width: NumberWithUnit;
    enabledColor: Color;
    disabledColor: Color;
}
export interface LaserlineViewfinderStyleJSON {
    type: "laserline";
    style: string;
    width: NumberWithUnitJSON;
    enabledColor: ColorJSON;
    disabledColor: ColorJSON;
}
export interface PrivateRectangularViewfinderDefault {
    color: Color;
    style: RectangularViewfinderStyle;
    lineStyle: RectangularViewfinderLineStyle;
    dimming: number;
    animation: RectangularViewfinderAnimation | null;
    size: SizeWithUnitAndAspect;
}
export interface RectangularViewfinderJSON {
    type: "rectangular";
    color: ColorJSON;
    style: string;
    lineStyle: string;
    dimming: number;
    animation: RectangularViewfinderAnimationJSON | null;
    size: SizeWithUnitAndAspectJSON;
}
interface RectangularViewfinderAnimationJSON {
    readonly looping: boolean;
}
export interface AimerViewfinderJSON {
    type: "aimer";
    frameColor: ColorJSON;
    dotColor: ColorJSON;
}
export interface PrivateRectangularViewfinderAnimation {
    fromJSON: (json: RectangularViewfinderAnimationJSON) => RectangularViewfinderAnimation;
}
export declare class RectangularViewfinderAnimation implements Serializable<RectangularViewfinderAnimationJSON> {
    private readonly _isLooping;
    private static fromJSON;
    get isLooping(): boolean;
    constructor(isLooping: boolean);
    toJSONObject(): RectangularViewfinderAnimationJSON;
}
export {};
