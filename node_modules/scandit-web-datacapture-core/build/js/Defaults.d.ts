import type * as CSS from "csstype";
import type { CameraPosition, FocusGestureStrategy, VideoResolution } from "./Camera+Related";
import { Color, MarginsWithUnit, PointWithUnit } from "./Common";
import type { Anchor } from "./DataCaptureView";
import type { FocusGestureJSON, FocusGesture, ZoomGesture, ZoomGestureJSON, LogoStyle } from "./DataCaptureView+Related";
import type { PrivateLaserlineViewfinderDefault, LaserlineViewfinderStyle, PrivateRectangularViewfinderDefault, RectangularViewfinderStyle } from "./Viewfinder+related";
export declare class PrivateFocusGestureDeserializer {
    static fromJSON(json: FocusGestureJSON | null): FocusGesture | null;
}
export declare class PrivateZoomGestureDeserializer {
    static fromJSON(json: ZoomGestureJSON | null): ZoomGesture | null;
}
export interface CameraSettingsDefaults {
    preferredResolution: VideoResolution;
    zoomFactor: number;
    zoomGestureZoomFactor: number;
    focusGestureStrategy: FocusGestureStrategy;
}
export interface SingleImageUploaderSettingsDefaults {
    iconElement: HTMLElement | SVGElement;
    informationElement: HTMLElement;
    buttonElement: HTMLElement;
    containerStyle: CSS.Properties;
    iconStyle: CSS.Properties;
    informationStyle: CSS.Properties;
    buttonStyle: CSS.Properties;
}
export interface Defaults {
    Camera: {
        Settings: CameraSettingsDefaults;
        defaultPosition: CameraPosition | null;
        availablePositions: CameraPosition[];
    };
    SingleImageUploader: {
        Settings: SingleImageUploaderSettingsDefaults;
    };
    DataCaptureView: {
        scanAreaMargins: MarginsWithUnit;
        pointOfInterest: PointWithUnit;
        logoStyle: LogoStyle;
        logoAnchor: Anchor;
        logoOffset: PointWithUnit;
        focusGesture: FocusGesture | null;
        zoomGesture: ZoomGesture | null;
        cameraRecoveryText: string;
    };
    LaserlineViewfinder: {
        defaultStyle: LaserlineViewfinderStyle;
        styles: Record<string, PrivateLaserlineViewfinderDefault>;
    };
    RectangularViewfinder: {
        defaultStyle: RectangularViewfinderStyle;
        styles: Record<string, PrivateRectangularViewfinderDefault>;
    };
    AimerViewfinder: {
        frameColor: Color;
        dotColor: Color;
    };
    Brush: {
        fillColor: Color;
        strokeColor: Color;
        strokeWidth: number;
    };
}
export interface CameraSettingsDefaultsJSON {
    preferredResolution: string;
    zoomFactor: number;
    zoomGestureZoomFactor: number;
    focusGestureStrategy: string;
}
export interface SingleImageUploaderSettingsDefaultsJSON {
    iconElement: string;
    informationElement: string;
    buttonElement: string;
    containerStyle: Record<string, number | string>;
    iconStyle: Record<string, number | string>;
    informationStyle: Record<string, number | string>;
    buttonStyle: Record<string, number | string>;
}
interface LaserlineViewfinderDefaultJSON {
    width: string;
    enabledColor: string;
    disabledColor: string;
    style: string;
}
interface RectangularViewfinderDefaultJSON {
    size: string;
    color: string;
    style: string;
    lineStyle: string;
    dimming: number;
    animation: string;
}
export interface DefaultsJSON {
    Camera: {
        Settings: CameraSettingsDefaultsJSON;
        defaultPosition: string | null;
        availablePositions: string[];
    };
    SingleImageUploader: {
        Settings: SingleImageUploaderSettingsDefaultsJSON;
    };
    DataCaptureView: {
        scanAreaMargins: string;
        pointOfInterest: string;
        logoAnchor: string;
        logoOffset: string;
        logoStyle: string;
        focusGesture: string;
        zoomGesture: string;
        cameraRecoveryText: string;
    };
    LaserlineViewfinder: {
        defaultStyle: string;
        styles: Record<string, LaserlineViewfinderDefaultJSON>;
    };
    RectangularViewfinder: {
        defaultStyle: string;
        styles: Record<string, RectangularViewfinderDefaultJSON>;
    };
    AimerViewfinder: {
        frameColor: string;
        dotColor: string;
    };
    Brush: {
        fillColor: string;
        strokeColor: string;
        strokeWidth: number;
    };
}
export declare function defaultsFromJSON(json: DefaultsJSON): Defaults;
export declare let defaultValues: Defaults;
export declare function setDefaults(newDefaults: Defaults): void;
export declare const defaultViewClassnames: {
    CONTAINER_CLASS_NAME: string;
    PAINTBOARDS_CONTAINER_CLASS_NAME: string;
    PAINTBOARD_CLASS_NAME: string;
    PAINTBOARD_CLASS_NAME_STATE_ON: string;
    CONTROLS_CLASS_NAME: string;
    CONTROL_WIDGET_CLASS_NAME: string;
    MIRRORED_CLASS_NAME: string;
    CAMERA_RECOVERY_CLASS_NAME: string;
    ERROR_CLASS_NAME: string;
    SINGLE_IMAGE_UPLOADER_CONTAINER_CLASS_NAME: string;
    CANVAS_VIDEO_PREVIEW_CLASS_NAME: string;
};
export {};
