import type { Serializable } from "./private/Serializable";
declare enum VibrationType {
    default = "default"
}
export interface VibrationJSON {
    type: VibrationType;
}
export declare class Vibration implements Serializable<VibrationJSON> {
    private readonly type;
    private readonly _vibrate;
    static get defaultVibration(): Vibration;
    private constructor();
    toJSONObject(): VibrationJSON;
    private vibrate;
}
export interface SoundJSON {
    resource?: string;
}
export declare class Sound implements Serializable<SoundJSON> {
    private static _defaultSound;
    private readonly audio;
    resource: string | null;
    static get defaultSound(): Sound;
    constructor(resource: string | null);
    toJSONObject(): SoundJSON;
    private play;
}
export interface FeedbackJSON {
    vibration?: VibrationJSON;
    sound?: SoundJSON;
}
export declare class Feedback implements Serializable<FeedbackJSON> {
    static get defaultFeedback(): Feedback;
    private readonly _vibration;
    private readonly _sound;
    get vibration(): Vibration | null;
    get sound(): Sound | null;
    constructor(vibration: Vibration | null, sound: Sound | null);
    emit(): void;
    toJSONObject(): FeedbackJSON;
}
export {};
