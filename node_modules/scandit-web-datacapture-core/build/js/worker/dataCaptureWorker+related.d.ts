/// <reference types="emscripten" />
import type { CreateContextParameters, LoadLibraryParameters, ProcessFrameParameters, ReportCameraPropertiesParameters, SetFrameSourceParameters } from "./dataCaptureEngine";
import type { DataCaptureContextJSON } from "../DataCaptureContext";
import type { ContextStatusJSON } from "../DataCaptureContext+Related";
import type { ProgressInfo } from "../LoadingStatus";
import type { Logger } from "../logger";
import type { Commands } from "../typings/vgCommandContext";
/**
 * MESSAGES (ACTIONS) SENT TO THE WORKER
 */
export declare type DataCaptureActionMessageKey = "createContext" | "deleteFrameData" | "dispose" | "extractCentaurusLicense" | "loadLibrary" | "processFrame" | "reportCameraProperties" | "requestFrameData" | "setFrameSource" | "setLogLevel" | "updateContext";
export interface ExtractCentaurusLicenseResponse {
    centaurus: {
        licenseKey: string;
    };
}
export interface RequestFrameDataResponse {
    data: Uint8ClampedArray | null;
}
export declare type WorkerResponse<C> = C extends "processFrame" ? ProcessFrameParameters : C extends "extractCentaurusLicense" ? ExtractCentaurusLicenseResponse : C extends "requestFrameData" ? RequestFrameDataResponse : void;
interface DataCaptureActionMessage {
    command: DataCaptureActionMessageKey;
    id: number;
}
export declare type LoadLibraryDataCaptureAction = DataCaptureActionMessage & LoadLibraryParameters & {
    command: "loadLibrary";
};
export declare type CreateContextDataCaptureAction = CreateContextParameters & DataCaptureActionMessage & {
    command: "createContext";
};
export declare type SetFrameSourceDataCaptureAction = DataCaptureActionMessage & SetFrameSourceParameters & {
    command: "setFrameSource";
};
export declare type ProcessFrameDataCaptureAction = DataCaptureActionMessage & ProcessFrameParameters & {
    command: "processFrame";
};
export declare type RequestFrameDataDataCaptureAction = DataCaptureActionMessage & {
    command: "requestFrameData";
    frameId: number;
};
export declare type DeleteFrameDataDataCaptureAction = DataCaptureActionMessage & {
    command: "deleteFrameData";
    frameId: number;
};
export declare type UpdateContextDataCaptureAction = DataCaptureActionMessage & {
    command: "updateContext";
    context: DataCaptureContextJSON;
    view: {
        width: number;
        height: number;
    } | null;
};
export declare type DisposeDataCaptureAction = DataCaptureActionMessage & {
    command: "dispose";
};
export declare type ReportCameraPropertiesDataCaptureAction = DataCaptureActionMessage & ReportCameraPropertiesParameters & {
    command: "reportCameraProperties";
};
export declare type SetLogLevelDataCaptureAction = DataCaptureActionMessage & {
    command: "setLogLevel";
    level: Logger.Level;
};
export declare type ExtractCentaurusLicenseDataCaptureAction = DataCaptureActionMessage & {
    command: "extractCentaurusLicense";
    licenseKey: string;
};
export declare type AnyDataCaptureActionMessage = CreateContextDataCaptureAction | DeleteFrameDataDataCaptureAction | DisposeDataCaptureAction | ExtractCentaurusLicenseDataCaptureAction | LoadLibraryDataCaptureAction | ProcessFrameDataCaptureAction | ReportCameraPropertiesDataCaptureAction | RequestFrameDataDataCaptureAction | SetFrameSourceDataCaptureAction | SetLogLevelDataCaptureAction | UpdateContextDataCaptureAction;
/**
 * MESSAGES EMITTED BY THE WORKER
 */
export declare type DataCaptureCallbackMessageKeys = "contextDidChangeStatus" | "didStartObservingContext" | "draw" | "loadLibraryProgress" | "successFeedback" | "workerTaskId";
interface BaseDataCaptureCallbackMessage {
    type: DataCaptureCallbackMessageKeys;
}
interface LoadLibraryProgressMessage {
    type: "loadLibraryProgress";
    payload: ProgressInfo;
}
interface WorkerTaskIdWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "workerTaskId";
    command: string;
    id: number;
    error?: any;
    payload?: any;
}
declare type DrawWorkerMessage = BaseDataCaptureCallbackMessage & {
    type: "draw";
    payload: Commands[];
};
declare type DidChangeStatusWorkerMessage = BaseDataCaptureCallbackMessage & {
    type: "contextDidChangeStatus";
    payload: ContextStatusJSON;
};
declare type startObservingContextWorkerMessage = BaseDataCaptureCallbackMessage & {
    type: "didStartObservingContext";
};
export declare type SuccessFeedbackWorkerMessage = BaseDataCaptureCallbackMessage & {
    type: "successFeedback";
};
export declare type DataCaptureCallbackMessage = DidChangeStatusWorkerMessage | DrawWorkerMessage | LoadLibraryProgressMessage | startObservingContextWorkerMessage | SuccessFeedbackWorkerMessage | WorkerTaskIdWorkerMessage;
/**
 * OTHERS
 */
export declare type PayloadForCommand<A, C> = A extends {
    command: C;
} ? A : never;
export interface DataCaptureWorker extends Omit<Worker, "postMessage"> {
    onmessage: ((this: Worker, event_: MessageEvent & {
        data: any;
    }) => void) | null;
    postMessage: <C extends AnyDataCaptureActionMessage["command"]>(message: PayloadForCommand<AnyDataCaptureActionMessage, C>, transfer?: Transferable[]) => void;
}
export interface EmscriptenClassHandle {
    clone: () => unknown;
    delete: () => void;
    isDeleted: () => boolean;
    deleteLater: () => void;
    isAliasOf: () => unknown;
}
export interface DataCaptureContext extends EmscriptenClassHandle {
    setCameraProperties: (deviceId: string, isFrontFacing: boolean, hasAutofocus: boolean) => void;
    addListener: (function_: any) => void;
    dispose: () => void;
    setFrameSource: (source: EmscriptenClassHandle) => void;
}
export interface DataCaptureImageBufferFrameSource extends EmscriptenClassHandle {
    outputFrame: (address: number, width: number, height: number, format: unknown) => void;
}
export interface DataCaptureView extends EmscriptenClassHandle {
    setViewSize: (w: number, h: number) => void;
    setNeedsRedrawDelegate: (delegate: any) => void;
    draw: () => void;
    getDrawCommands: () => string;
    isViewRefreshHandlerSet: boolean;
}
export interface JSONParseable {
    toJson: () => string;
}
export interface DataCaptureContextDeserializerResult extends EmscriptenClassHandle {
    getContext: () => DataCaptureContext;
    getView: () => DataCaptureView | undefined;
}
export interface DataCaptureContextDeserializer extends EmscriptenClassHandle {
    contextFromJson: (json: string) => DataCaptureContextDeserializerResult;
    updateContextFromJson: (context: DataCaptureContext, view: DataCaptureView | undefined, json: string) => DataCaptureContextDeserializerResult;
}
export interface CaptureModeDeserializerInstance extends EmscriptenClassHandle {
    setListener: (listener: any) => void;
}
export interface ModuleMirrorAxis {
    None: unknown;
    X: unknown;
    Y: unknown;
}
export interface Vector {
    push_back: (element: any) => void;
}
export interface WasmFrameData {
    getFrameData: () => Uint8ClampedArray;
    getWidth: () => number;
    getHeight: () => number;
    getMirrorAxis: () => unknown;
}
export interface Module extends EmscriptenModule {
    callMain: () => void;
    canvas: OffscreenCanvas | undefined;
    DataCaptureContextDeserializer: new (fsFolderPath: string, deviceId: string, deviceModel: string, domain: string, modeDeserializer: Vector, delayedRegistration: boolean, highEndBlurryRecognition: boolean, resourcePath: string) => DataCaptureContextDeserializer;
    DataCaptureContextListener: {
        extend: (target: "DataCaptureContextListener", parameters: {
            didChangeStatus: (context: DataCaptureContext, contextStatus: {
                toJson: () => string;
            }) => void;
            didStartObservingContext: (context: DataCaptureContext) => void;
        }) => new () => any;
    };
    ImageBufferFrameSource: new (mirroredAxis: unknown) => DataCaptureImageBufferFrameSource;
    ImageBufferFormat: {
        Grayscale8: unknown;
        Rgb888: unknown;
        Rgba8888: unknown;
    };
    Axis: ModuleMirrorAxis;
    NeedsRedrawDelegate: {
        extend: (target: "NeedsRedrawDelegate", parameters: {
            setNeedsRedrawIn: (inMs: number) => void;
        }) => new () => any;
    };
    VectorDataCaptureModeDeserializer: new () => Vector;
    allocateUint8Array: (length: number) => number;
    deleteUint8Array: (adress: number) => void;
    DataDecoding: {
        extend: (target: "DataDecoding", options: {
            decode: (rawData: ArrayBuffer, encodingRanges: string) => string;
        }) => new () => any;
    };
    setDataDecoding: (decoder: any) => void;
    LicenseUtils: {
        getBlinkIdLicenseKey: (scanditLicense: string) => string;
    };
    Feedback: {
        extend: (target: "Feedback", parameters: {
            emit: () => void;
        }) => new () => any;
    };
    dispose: () => void;
}
export {};
