import type { ProgressInfo } from "../LoadingStatus";
export declare enum ResponseValidity {
    VALID = "VALID",
    INVALID = "INVALID",
    NOT_VERIFIABLE = "NOT_VERIFIABLE"
}
export declare function verifyResponseData(responseData: ArrayBuffer | Promise<ArrayBuffer>, expectedHash: string | undefined, wasmURI: string): Promise<ResponseValidity>;
interface ProgressListener {
    onProgress?: (info: ProgressInfo) => void;
    onError?: ({ error }: {
        error: unknown;
    }) => void;
    onComplete?: (info: ProgressInfo) => void;
}
export declare const getTotalInBytes: (wasmURI: string, headers?: Headers) => number;
export declare function createResponseWithProgress(wasmUri: string, response: Response, { onProgress, onError, onComplete }: ProgressListener): Response;
interface FetchWasmParameters {
    wasmURI: string;
    awaitFullResponse: boolean;
    onProgress?: (info: ProgressInfo) => void;
}
export declare function fetchWasm({ wasmURI, awaitFullResponse, onProgress }: FetchWasmParameters): Promise<Response>;
export {};
