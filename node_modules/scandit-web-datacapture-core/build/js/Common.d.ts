import type { Serializable, StringSerializable } from "./private/Serializable";
export interface PointJSON {
    x: number;
    y: number;
}
export declare class Point implements Serializable<PointJSON> {
    private readonly _x;
    private readonly _y;
    get x(): number;
    get y(): number;
    private static fromJSON;
    constructor(x: number, y: number);
    toJSONObject(): PointJSON;
}
export interface QuadrilateralJSON {
    topLeft: PointJSON;
    topRight: PointJSON;
    bottomRight: PointJSON;
    bottomLeft: PointJSON;
}
export declare class Quadrilateral implements Serializable<QuadrilateralJSON> {
    private readonly _topLeft;
    private readonly _topRight;
    private readonly _bottomRight;
    private readonly _bottomLeft;
    get topLeft(): Point;
    get topRight(): Point;
    get bottomRight(): Point;
    get bottomLeft(): Point;
    private static fromJSON;
    constructor(topLeft: Point, topRight: Point, bottomRight: Point, bottomLeft: Point);
    toJSONObject(): QuadrilateralJSON;
}
export declare enum MeasureUnit {
    Pixel = "pixel",
    Fraction = "fraction"
}
export interface NumberWithUnitJSON {
    value: number;
    unit: string;
}
export declare class NumberWithUnit implements Serializable<NumberWithUnitJSON> {
    private readonly _value;
    private readonly _unit;
    get value(): number;
    get unit(): MeasureUnit;
    private static fromJSON;
    constructor(value: number, unit: MeasureUnit);
    toJSONObject(): NumberWithUnitJSON;
}
export interface PointWithUnitJSON {
    x: NumberWithUnitJSON;
    y: NumberWithUnitJSON;
}
export declare class PointWithUnit implements Serializable<PointWithUnitJSON> {
    private readonly _x;
    private readonly _y;
    get x(): NumberWithUnit;
    get y(): NumberWithUnit;
    private static fromJSON;
    private static get zero();
    constructor(x: NumberWithUnit, y: NumberWithUnit);
    toJSONObject(): PointWithUnitJSON;
}
export interface RectJSON {
    origin: PointJSON;
    size: SizeJSON;
}
export declare class Rect implements Serializable<RectJSON> {
    private readonly _origin;
    private readonly _size;
    get origin(): Point;
    get size(): Size;
    constructor(origin: Point, size: Size);
    toJSONObject(): RectJSON;
}
export interface RectWithUnitJSON {
    origin: PointWithUnitJSON;
    size: SizeWithUnitJSON;
}
export declare class RectWithUnit implements Serializable<RectWithUnitJSON> {
    private readonly _origin;
    private readonly _size;
    get origin(): PointWithUnit;
    get size(): SizeWithUnit;
    constructor(origin: PointWithUnit, size: SizeWithUnit);
    toJSONObject(): RectWithUnitJSON;
}
export interface SizeWithUnitJSON {
    width: NumberWithUnitJSON;
    height: NumberWithUnitJSON;
}
export declare class SizeWithUnit implements Serializable<SizeWithUnitJSON> {
    private readonly _width;
    private readonly _height;
    get width(): NumberWithUnit;
    get height(): NumberWithUnit;
    constructor(width: NumberWithUnit, height: NumberWithUnit);
    isSameAs(other: SizeWithUnit): boolean;
    toJSONObject(): SizeWithUnitJSON;
    private static fromJSON;
}
export interface SizeJSON {
    width: number;
    height: number;
}
export declare class Size implements Serializable<SizeJSON> {
    private readonly _width;
    private readonly _height;
    get width(): number;
    get height(): number;
    private static fromJSON;
    constructor(width: number, height: number);
    toJSONObject(): SizeJSON;
}
export declare class SizeWithAspect {
    private readonly _size;
    private readonly _aspect;
    get size(): NumberWithUnit;
    get aspect(): number;
    constructor(size: NumberWithUnit, aspect: number);
}
export declare enum SizingMode {
    WidthAndHeight = "widthAndHeight",
    WidthAndAspectRatio = "widthAndAspectRatio",
    HeightAndAspectRatio = "heightAndAspectRatio",
    ShorterDimensionAndAspectRatio = "shorterDimensionAndAspectRatio"
}
export interface SizeWithUnitAndAspectJSON {
    width?: NumberWithUnitJSON;
    height?: NumberWithUnitJSON;
    shorterDimension?: NumberWithUnitJSON;
    aspect?: number;
}
export declare class SizeWithUnitAndAspect implements Serializable<SizeWithUnitAndAspectJSON> {
    private _widthAndHeight;
    private _widthAndAspectRatio;
    private _heightAndAspectRatio;
    private _shorterDimensionAndAspectRatio;
    get widthAndHeight(): SizeWithUnit | null;
    get widthAndAspectRatio(): SizeWithAspect | null;
    get heightAndAspectRatio(): SizeWithAspect | null;
    get shorterDimensionAndAspectRatio(): SizeWithAspect | null;
    get sizingMode(): SizingMode;
    private static sizeWithWidthAndHeight;
    private static sizeWithWidthAndAspectRatio;
    private static sizeWithHeightAndAspectRatio;
    private static sizeWithShorterDimensionAndAspectRatio;
    private static fromJSON;
    toJSONObject(): SizeWithUnitAndAspectJSON;
}
export interface MarginsWithUnitJSON {
    left: NumberWithUnitJSON;
    right: NumberWithUnitJSON;
    top: NumberWithUnitJSON;
    bottom: NumberWithUnitJSON;
}
export declare class MarginsWithUnit implements Serializable<MarginsWithUnitJSON> {
    private readonly _left;
    private readonly _right;
    private readonly _top;
    private readonly _bottom;
    get left(): NumberWithUnit;
    get right(): NumberWithUnit;
    get top(): NumberWithUnit;
    get bottom(): NumberWithUnit;
    constructor(left: NumberWithUnit, top: NumberWithUnit, right: NumberWithUnit, bottom: NumberWithUnit);
    private static fromJSON;
    private static get zero();
    toJSONObject(): MarginsWithUnitJSON;
}
export declare type ColorJSON = string;
export declare class Color implements StringSerializable {
    private readonly hexadecimalString;
    get redComponent(): string;
    get greenComponent(): string;
    get blueComponent(): string;
    get alphaComponent(): string;
    get red(): number;
    get green(): number;
    get blue(): number;
    get alpha(): number;
    static fromHex(hex: string): Color;
    static fromRGBA(red: number, green: number, blue: number, alpha?: number): Color;
    private static hexToNumber;
    private static fromJSON;
    private static numberToHex;
    private static normalizeHex;
    private static normalizeAlpha;
    private constructor();
    withAlpha(alpha: number): Color;
    toJSON(): string;
}
export declare enum Orientation {
    Unknown = "unknown",
    Portrait = "portrait",
    PortraitUpsideDown = "portraitUpsideDown",
    LandscapeRight = "landscapeRight",
    LandscapeLeft = "landscapeLeft"
}
export declare enum Direction {
    None = "none",
    Horizontal = "horizontal",
    LeftToRight = "leftToRight",
    RightToLeft = "rightToLeft",
    Vertical = "vertical",
    TopToBottom = "topToBottom",
    BottomToTop = "bottomToTop"
}
export interface JSONType {
    [key: string]: JSONType | JSONType[] | boolean | number | string | null;
}
