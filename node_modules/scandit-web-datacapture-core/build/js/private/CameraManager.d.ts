import type { CameraSettings } from "../Camera+Related";
import { CameraPosition } from "../Camera+Related";
import type { DeviceCamera } from "../private/CameraAccess";
import type { ReportCameraPropertiesParameters } from "../worker/dataCaptureEngine";
export declare enum MeteringMode {
    CONTINUOUS = "continuous",
    MANUAL = "manual",
    NONE = "none",
    SINGLE_SHOT = "single-shot"
}
export declare enum CameraResolutionConstraint {
    ULTRA_HD = 0,
    FULL_HD = 1,
    HD = 2,
    SD = 3,
    NONE = 4
}
export interface ExtendedMediaTrackCapabilities extends MediaTrackCapabilities {
    exposureCompensation?: DoubleRange;
    exposureMode?: MeteringMode[];
    exposureTime?: DoubleRange;
    focusDistance?: DoubleRange;
    focusMode?: MeteringMode[];
    torch?: boolean;
    zoom?: DoubleRange;
}
export interface ExtendedMediaTrackConstraintSet extends MediaTrackConstraintSet {
    exposureCompensation?: ConstrainDouble;
    exposureMode?: MeteringMode;
    exposureTime?: ConstrainDouble;
    focusDistance?: ConstrainDouble;
    focusMode?: MeteringMode;
    torch?: boolean;
    zoom?: ConstrainDouble;
}
export interface GUI {
    isCameraRecoveryVisible: () => boolean;
    setCameraRecoveryVisible: (visible: boolean) => void;
}
export interface FrameCapture {
    data: Uint8ClampedArray;
    width: number;
    height: number;
}
export declare enum CameraManagerEvent {
    CAMERA_PROPERTIES = "cameraProperties",
    CAMERA_ACCESS_ERROR = "cameraAccessError"
}
export declare type CameraManagerEventParameters<C> = C extends CameraManagerEvent.CAMERA_PROPERTIES ? ReportCameraPropertiesParameters : C extends CameraManagerEvent.CAMERA_ACCESS_ERROR ? any : never;
/**
 * A barcode picker utility class used to handle camera interaction.
 */
export declare class CameraManager {
    private static readonly cameraAccessTimeoutMs;
    private static readonly videoMetadataCheckTimeoutMs;
    private static readonly videoMetadataCheckIntervalMs;
    private static readonly getCapabilitiesTimeoutMs;
    private static readonly autofocusIntervalMs;
    private static readonly manualToAutofocusResumeTimeoutMs;
    private static readonly manualFocusWaitTimeoutMs;
    private static readonly noCameraErrorParameters;
    private static readonly notReadableErrorParameters;
    static MIRRORED_CLASS_NAME: string;
    selectedCamera?: DeviceCamera;
    activeCamera?: DeviceCamera;
    activeCameraSettings?: CameraSettings;
    gui: GUI;
    videoElement: HTMLVideoElement;
    canvas: HTMLCanvasElement;
    private readonly listeners;
    private readonly mirrorImageOverrides;
    private readonly triggerFatalError;
    private readonly postStreamInitializationListener;
    private readonly videoResizeListener;
    private readonly videoTrackEndedListener;
    private readonly videoTrackMuteListener;
    private readonly triggerManualFocusListener;
    private readonly triggerZoomStartListener;
    private readonly triggerZoomMoveListener;
    private readonly checkCameraVideoStreamAccessIfVisibleListener;
    private readonly handleWebGLContextLostListener;
    private static _instance;
    private cameraPosition;
    private selectedCameraSettings?;
    private mediaTrackCapabilities?;
    private mediaTrackCapabilitiesPromise?;
    private mediaTrackCapabilitiesPromiseResolver?;
    private cameraAccessTimeout;
    private cameraAccessRejectCallback?;
    private videoMetadataCheckInterval;
    private getCapabilitiesTimeout;
    private autofocusInterval;
    private manualToAutofocusResumeTimeout;
    private manualFocusWaitTimeout;
    private torchToggleEnabled;
    private tapToFocusEnabled;
    private pinchToZoomEnabled;
    private pinchToZoomDistance?;
    private pinchToZoomInitialZoom;
    private torchEnabled;
    private cameraInitializationPromise?;
    private abortedCameraInitializationResolveCallback?;
    private cameraSetupPromise?;
    private _mediaStream?;
    private _canvasWebGLContext;
    private _canvas2dContext;
    private _imageData?;
    constructor();
    get mediaStream(): MediaStream | undefined;
    set mediaStream(stream: MediaStream | undefined);
    set imageData(imageData: Uint8ClampedArray);
    waitForCapabilities(): Promise<void>;
    static instance(): CameraManager;
    setInteractionOptions(torchToggleEnabled: boolean, tapToFocusEnabled: boolean, pinchToZoomEnabled: boolean): void;
    isTapToFocusEnabled(): boolean;
    setTapToFocusEnabled(enabled: boolean): void;
    isPinchToZoomEnabled(): boolean;
    setPinchToZoomEnabled(enabled: boolean): void;
    setInitialCameraPosition(cameraPosition: CameraPosition): void;
    setCameraPosition(cameraPosition: CameraPosition): Promise<void>;
    setSelectedCamera(camera?: DeviceCamera): void;
    setSelectedCameraSettings(cameraSettings?: CameraSettings): void;
    setupCameras(): Promise<void>;
    stopStream(cameraInitializationFailure?: boolean): Promise<void>;
    applyCameraSettings(cameraSettings?: CameraSettings): Promise<void>;
    reinitializeCamera(): Promise<void>;
    initializeCameraWithSettings(camera?: DeviceCamera, cameraSettings?: CameraSettings): Promise<void>;
    setTorchEnabled(enabled: boolean): Promise<void>;
    toggleTorch(): Promise<void>;
    setZoom(zoomFactor: number): Promise<void>;
    setFrameRate(frameRate: {
        min?: number;
        max?: number;
    }): Promise<void>;
    setFocus(manualLensPosition: number): Promise<void>;
    setExposure(exposure: {
        compensation?: number;
        time?: number;
    }): Promise<void>;
    isTorchAvailable(): Promise<boolean>;
    isMirrorImageEnabled(): boolean;
    setMirrorImageEnabled(enabled: boolean, override: boolean): void;
    addListener<E extends CameraManagerEvent>(event: CameraManagerEvent, listener: (details: CameraManagerEventParameters<E>) => void): void;
    removeListener<E extends CameraManagerEvent>(event: CameraManagerEvent, listenerToRemove?: (details: CameraManagerEventParameters<E>) => void): void;
    playVideo(): Promise<void>;
    updateCanvasVideoImage(): void;
    captureImage(): FrameCapture | null;
    private isVideoAndContextStateValid;
    private recoverStreamIfNeeded;
    private setupCamerasAndStream;
    private getInitialCameraResolutionConstraint;
    private accessAutoselectedCamera;
    private accessInitialCamera;
    private updateActiveCameraCurrentResolution;
    private postStreamInitialization;
    private handleVideoResize;
    private checkCameraVideoStreamAccessIfVisible;
    private videoTrackEndedRecovery;
    private videoTrackMuteRecovery;
    private handleWebGLContextLost;
    private triggerManualFocusForContinuous;
    private triggerManualFocusForSingleShot;
    private triggerManualFocus;
    private triggerZoomStart;
    private triggerZoomMove;
    private storeStreamCapabilities;
    private reportCameraProperties;
    private setupAutofocus;
    private triggerAutoFocus;
    private triggerFocusMode;
    private enableTapToFocusListeners;
    private enablePinchToZoomListeners;
    private disableTapToFocusListeners;
    private disablePinchToZoomListeners;
    private initializeCameraAndCheckUpdatedSettings;
    private handleCameraInitializationError;
    private updateStreamForResolution;
    private initializeStreamForResolution;
    private initializeCameraForResolution;
    private setCameraAccessTimeout;
    private checkCameraAccess;
    private checkVideoMetadata;
    private setupCameraStreamVideo;
    private get canvas2dContext();
    private get canvasWebGLContext();
    private emit;
}
