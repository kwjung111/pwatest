import type { FrameSource } from "../Camera+Related";
import type { DataCaptureContext } from "../DataCaptureContext";
import type { DataCaptureView } from "../DataCaptureView";
import type { CameraFOVSwitchControl, CameraSwitchControl, Control, TorchSwitchControl } from "../ViewControls";
export interface PrivateControl {
    type: "camera-fov" | "camera" | "torch";
    view: DataCaptureView | null;
}
export interface TorchSwitchControlIcon {
    on: {
        idle: string | null;
        pressed: string | null;
    };
    off: {
        idle: string | null;
        pressed: string | null;
    };
}
export interface CameraSwitchControlIcon {
    idle: string | null;
    pressed: string | null;
}
export interface CameraFOVSwitchControlIcon {
    wide: {
        idle: string | null;
        pressed: string | null;
    };
    ultraWide: {
        idle: string | null;
        pressed: string | null;
    };
}
export interface PrivateControlWidget {
    install: () => Promise<void>;
    remove: (definitiveRemoval?: boolean) => void;
}
export declare enum ButtonState {
    Idle = "idle",
    Pressed = "pressed"
}
declare abstract class ButtonControlWidget<C extends Control> {
    domHost: HTMLElement;
    state: ButtonState;
    button: HTMLButtonElement | undefined;
    isHover: boolean;
    onTouchStartListener: (e?: Event) => void;
    onMouseEnterListener: (e?: Event) => void;
    onMouseLeaveListener: (e?: Event) => void;
    onClickListener: (e?: Event) => void;
    protected control: C;
    constructor(control: C, domHost: HTMLElement);
    protected get frameSource(): FrameSource | null | undefined;
    protected get context(): DataCaptureContext | null | undefined;
    install(): Promise<void>;
    remove(definitiveRemoval?: boolean): void;
    protected hide(): void;
    protected show(): void;
    protected setupButton(): HTMLButtonElement;
    private onTouchStart;
    private onMouseEnter;
    private onMouseLeave;
    private onClick;
    private updateButtonBackground;
    protected abstract getImageFromState(): string | null;
    protected abstract buttonClicked(): Promise<void>;
    protected abstract canShow(): Promise<boolean>;
}
export declare class PrivateTorchControlWidget extends ButtonControlWidget<TorchSwitchControl> implements PrivateControlWidget {
    constructor(control: TorchSwitchControl, domHost: HTMLElement);
    protected buttonClicked(): Promise<void>;
    protected canShow(): Promise<boolean>;
    protected getImageFromState(): string | null;
    private setup;
    private isTorchAvailable;
    private retrieveTorchState;
}
export declare class CameraSwitchControlWidget extends ButtonControlWidget<CameraSwitchControl> implements PrivateControlWidget {
    private isTransitioning;
    constructor(control: CameraSwitchControl, domHost: HTMLElement);
    private static get Camera();
    private static get CameraAccess();
    protected canShow(): Promise<boolean>;
    protected getImageFromState(): string | null;
    protected buttonClicked(): Promise<void>;
    private setup;
    private getNextDeviceCamera;
    private switchCameras;
}
export declare class PrivateCameraFOVSwitchControlWidget extends ButtonControlWidget<CameraFOVSwitchControl> implements PrivateControlWidget {
    private isTransitioning;
    constructor(control: CameraFOVSwitchControl, domHost: HTMLElement);
    private static get Camera();
    private static get CameraAccess();
    protected canShow(): Promise<boolean>;
    protected getImageFromState(): string | null;
    protected buttonClicked(): Promise<void>;
    private setup;
    private isUltraWideBackCamera;
    private getNewDeviceCamera;
    private switchCameras;
}
export {};
