import type { Commands } from "../typings/vgCommandContext";
export declare class PrivateCanvasDrawer {
    private static ResizeObserver;
    private _context;
    private resizeObserver?;
    private isNextDrawPending;
    private latestCommands;
    private readonly canvas;
    constructor(canvas: HTMLCanvasElement);
    get context(): CanvasRenderingContext2D;
    /**
     * Draw given commands. If the canvas has not a valid size, postpone drawing until it is.
     */
    draw(commands: Commands[]): void;
    private postponeDraw;
    private drawSingleCommand;
    private beginPath;
    private closePath;
    private setStrokeColor;
    private setFillColor;
    private fill;
    private stroke;
    private addLine;
    private lineTo;
    private moveTo;
    private addRectangle;
    private addRoundedRectangle;
    private setStrokeWidth;
    private addArc;
    private addCircle;
    private bezierTo;
    private saveState;
    private restoreState;
    private translate;
    private colorToRgbaString;
    private isCanvasReady;
    /**
     * Observe the canvas until it has a valid size. When it happens,
     * draw postponed commands onto it.
     * Also on canvas resize, scale the context by device pixel ratio.
     */
    private setCanvasObserver;
}
