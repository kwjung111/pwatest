/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type Commands = AddCircleCommand | AddArcCommand | AddLineCommand | AddRectCommand | AddRoundedRectCommand | SetStrokeColorCommand | SetStrokeWidthCommand | SetFillColorCommand | BeginPathCommand | ClosePathCommand | MoveToCommand | LineToCommand | FillCommand | StrokeCommand | BezierToCommand | SaveStateCommand | RestoreStateCommand | TranslateCommand;
/**
 * WIP: The root schema comprises the entire VgCommandContext schema
 */
export declare type TheVgCommandContextSchema = Commands[];
/**
 * Add a circle
 */
export interface AddCircleCommand {
    command: "addCircle";
    args: {
        center: Point;
        radius: number;
    };
}
export interface Point {
    x: number;
    y: number;
}
/**
 * Add a circular arc
 */
export interface AddArcCommand {
    command: "addArc";
    args: {
        center: Point;
        radius: number;
        startAngle: number;
        endAngle: number;
        counterclockwise: boolean;
    };
}
/**
 * Add a line from start to end
 */
export interface AddLineCommand {
    command: "addLine";
    args: {
        start: Point;
        end: Point;
    };
}
/**
 * Add a rect with provided origin and size
 */
export interface AddRectCommand {
    command: "addRect";
    args: {
        origin: Point;
        size: Size;
    };
}
export interface Size {
    width: number;
    height: number;
}
/**
 * Add a rounded rect with provided origin, size and radius
 */
export interface AddRoundedRectCommand {
    command: "addRoundedRect";
    args: {
        origin: Point;
        size: Size;
        radius: number;
    };
}
/**
 * Set stroke color
 */
export interface SetStrokeColorCommand {
    command: "setStrokeColor";
    args: {
        color: Color;
    };
}
export interface Color {
    r: number;
    g: number;
    b: number;
    a: number;
}
/**
 * Set stroke width
 */
export interface SetStrokeWidthCommand {
    command: "setStrokeWidth";
    args: {
        width: number;
    };
}
/**
 * Set fill color
 */
export interface SetFillColorCommand {
    command: "setFillColor";
    args: {
        color: Color;
    };
}
/**
 * Clears the current path and sub-paths.
 */
export interface BeginPathCommand {
    command: "beginPath";
}
/**
 * Closes current sub-path with a line segment.
 */
export interface ClosePathCommand {
    command: "closePath";
}
/**
 * Starts new sub-path with specified point as first point
 */
export interface MoveToCommand {
    command: "moveTo";
    args: {
        point: Point;
    };
}
/**
 * Adds line segment from the last point in the path to the specified point.
 */
export interface LineToCommand {
    command: "lineTo";
    args: {
        point: Point;
    };
}
/**
 * Fills the current path with current fill style.
 */
export interface FillCommand {
    command: "fill";
}
/**
 * Fills the current path with current stroke style.
 */
export interface StrokeCommand {
    command: "stroke";
}
/**
 * Add a cubic bezier curve from last point in the path to the specified end point via the two control points.
 */
export interface BezierToCommand {
    command: "bezierTo";
    args: {
        firstControlPoint: Point;
        secondControlPoint: Point;
        endPoint: Point;
    };
}
/**
 * Save the drawing state.
 */
export interface SaveStateCommand {
    command: "saveState";
}
/**
 * Restore the drawing state.
 */
export interface RestoreStateCommand {
    command: "restoreState";
}
/**
 * Add a translation transformation by moving the canvas and its origin x units horizontally and y units vertically on the grid
 */
export interface TranslateCommand {
    command: "translate";
    args: {
        distance: Point;
    };
}
