"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stagedConfig = exports.staged = exports.diffConfig = exports.diff = void 0;
const git_1 = require("./git");
const STAGED = true;
/**
 * Exclude unchanged files from being processed
 *
 * Since we're excluding unchanged files in the post-processor, we can exclude
 * them from being processed in the first place, as a performance optimization.
 * This is increasingly useful the more files there are in the repository.
 */
const getPreProcessor = (staged = false) => (text, filename) => {
    const shouldBeProcessed = process.env.VSCODE_CLI !== undefined ||
        !staged ||
        (0, git_1.getDiffFileList)().includes(filename);
    return shouldBeProcessed ? [text] : [];
};
const isLineWithinRange = (line) => (range) => {
    return range.isWithinRange(line);
};
const getPostProcessor = (staged = false) => (messages, filename) => {
    if (!staged && (0, git_1.getUntrackedFileList)(staged).includes(filename)) {
        return messages.flat();
    }
    if (staged && !(0, git_1.hasCleanIndex)(filename)) {
        const fatal = true;
        const message = `${filename} has unstaged changes. Please stage or remove the changes.`;
        const severity = 2;
        const fatalError = {
            fatal,
            message,
            severity,
            column: 0,
            line: 0,
            ruleId: null,
        };
        return [fatalError];
    }
    const diff = (0, git_1.getDiffForFile)(filename, staged);
    return messages
        .map((message) => {
        const filteredMessage = message.filter(({ fatal, line }) => {
            if (fatal === true) {
                return true;
            }
            const isLineWithinSomeRange = (0, git_1.getRangesForDiff)(diff).some(isLineWithinRange(line));
            return isLineWithinSomeRange;
        });
        return filteredMessage;
    })
        .reduce((a, b) => a.concat(b), []);
};
const getProcessors = (staged = false) => ({
    preprocess: getPreProcessor(staged),
    postprocess: getPostProcessor(staged),
    supportsAutofix: true,
});
const diff = getProcessors();
exports.diff = diff;
const staged = getProcessors(STAGED);
exports.staged = staged;
const diffConfig = {
    plugins: ["diff"],
    overrides: [
        {
            files: ["*"],
            processor: "diff/diff",
        },
    ],
};
exports.diffConfig = diffConfig;
const stagedConfig = {
    plugins: ["diff"],
    overrides: [
        {
            files: ["*"],
            processor: "diff/staged",
        },
    ],
};
exports.stagedConfig = stagedConfig;
